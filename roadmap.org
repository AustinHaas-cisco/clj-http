* 4.x Upgrade Tasks

- [X] migrate to switch to apache httpclient 5.x
- [ ] remove old redirect behavior
- [ ] update cookie default behavior
- [ ] wrap async response in a future
- [ ] remove deprecated :transit-opts
- [ ] fix linter errors using clj-kondo
- [ ] remove spelling errors for reuseable -> reusable
- [ ] update list of options for request options
- [ ] update list of connection pooling options

- [ ] Re-triage all 4.x labelled tickets and identify if fixed correctly
- [ ] HTTP Client Builder

- [ ] RetryHandler API replaced with RetryStrategy
  - [ ]
- [ ] CookieSpec API has changed
  - [ ] Note in README that the custom cookie spec is a breaking change
  - [ ] Update README instructions on custom cookie policy
  - [ ] DefaultCookie is RELAXED -> much more forgiving parser.
- [ ] RedirectStrategy API changed
  - [ ] Note in README that the custom redirect strategy is a breaking change
  - [ ] only impacts you if you implement a custom redirect strategy
  - [ ] redirect is alwasy lax now

- [ ] Clean up how reusable connections are defined
  - [ ] It should depend on the *context* rather than a marker of the class
- [ ] tests for socks proxy
  - [ ] migrated into get-socket-config
- [ ] Update core/http-request-for with new Http classes

BREAKING-ish:
- when using a explicit connection manager, the socket timeout per-request has no effect
- :request-interceptor and :response-interceptor take 3 arguments instead of 2 previously

** Async Requests
- how to accomodate for reactive producers & reactive consumers
- do we *really* want to use this existing interface?

Shared Responsibilities:
- HTTPContext
- Request/Response transformations (clj-http bits)
- setting up a connection manager

Not-Shared Responsibilities:
- setting up a connection manager
- building a request object
- producing requests
- consuming response chunks


What people *may* be asking for (with async):
2. a future interface for a response
3. non-blocking IO (both request & response)
4. event-driven

** core
For request body, we should explicit define what the allowed types are. Think about how they influence sync & async design.

** Connection Managers
- remove BasicConnectionManager
- move reusable? into the =request= function, rather than matching on type of connection manager
- with-connection-manager should require the client to explicitly pass in a conn-mgr. Make it their responsibility to create & cleanup using with-open.
- two option: sync & async conn manager
- should we *really* provide a socket listener thing? could this be moved into an extension module?
- clojure spec??
- use non-registry implementations for simpliciyt
  - advanced users can configure their own connection managers via interop
- binding *should* be implemented in clojure middleware rather than in =core=.
  This siplifies how to determine when a connection manager is reusable


** Foundational
- [ ] Understand how the async client interacts in this version
- [ ] Understand how the connection managers are configured in this version

** Optional
- [ ] Propose namespacing related request parameters
- [ ] add macros to make async testing easier to observe (specifically errors) and finding "blocked" tests
- [ ] for each deref, set a time deadline to prevent test deadlock

- [ ] code tidying
  - use clj-kondo, clean linter warnings
    - [clojure.test :refer :all] -> [clojure.test :refer [deftesting testing is are]
  - use clj-refactor to tidy ns forms
